// Generated by CoffeeScript 1.9.3
var Book;

this.mainCtrl = angular.module('mainController', []);

Book = (function() {
  var PERMITED_ATTRS;

  PERMITED_ATTRS = ['name', 'isbn', 'author', 'cover', 'source', 'favored'];

  function Book(json_data) {
    var attr, d, i, len;
    d = json_data;
    for (i = 0, len = PERMITED_ATTRS.length; i < len; i++) {
      attr = PERMITED_ATTRS[i];
      this[attr] = json_data[attr];
    }
  }

  return Book;

})();

this.mainCtrl.controller("MainCtrl", [
  '$scope', '$interval', '$window', 'NetManager', 'Helper', 'nodeValidator', function($scope, $interval, $window, NetManager, Helper, nodeValidator) {
    var scattrs, user_login_url, ws;
    $scope.$watch('book.jd_id', function() {
      var jd_id;
      console.log('jd');
      jd_id = $scope.book.jd_id;
      if (jd_id && $scope.aio_form.$valid) {
        $scope.book.isbn = null;
        $scope.book.searching = true;
        return NetManager.get('/books/jd_get_isbn', {
          item_id: jd_id
        }).to($scope.book, 'isbn');
      }
    });
    $scope.$watch('book.isbn', function() {
      var isbn;
      $scope.error_msg = "";
      isbn = $scope.book.isbn;
      $scope.book.show = false;
      $scope.btn = {};
      if (isbn && $scope.aio_form.$valid) {
        $scope.book.searching = true;
        return NetManager.get('/books/sniffer', {
          isbn: isbn
        }).then(function(data) {
          if (data.source !== 'none') {
            if (!$scope.ok.jd) {
              $scope.btn.borrow = true;
            }
            $scope.btn.wish = true;
          }
          $scope.book.searching = false;
          $scope.book.cover = data.cover;
          $scope.book.name = data.name;
          $scope.book.author = data.author;
          $scope.book.source = data.source;
          $scope.book.favored = data.favored;
          return $scope.book.show = true;
        });
      }
    });
    user_login_url = function(token) {
      return $window.location.origin + ("/s/" + token);
    };
    scattrs = {
      aio: {
        input: ''
      },
      book: {
        isbn: '',
        jd_id: null
      },
      ok: {},
      btn: {},
      qrcode: null,
      input_is_correct: function(allowempty) {
        var ret;
        if (allowempty === void 0) {
          allowempty = true;
        }
        ret = (allowempty && !$scope.aio_form.input.$viewValue) || $scope.aio_form.$valid;
        return ret;
      },
      get_book_parm: function() {
        return {
          book: {
            book_info_attributes: angular.copy($scope.book)
          }
        };
      },
      author_brief: function(book) {
        return Helper.brief(book.author, 12);
      },
      handle_paste: function() {
        $scope.book = {
          isbn: '',
          jd_id: null
        };
        return $scope.ok = {};
      },
      handle_clear: function() {
        $scope.book = {
          isbn: '',
          jd_id: null
        };
        $('#aio-input').val('');
        $scope.aio.input = null;
        $scope.aio_form.input.$viewValue = "";
        $scope.response_msg = "";
        $scope.btn = {};
        return $scope.qrcode = null;
      },
      handle_favor: function(book) {
        if ($scope.book.favoring) {
          return;
        }
        $scope.book.favoring = true;
        return NetManager.post('/books/favor', {
          isbn: book.isbn,
          favored: book.favored
        }).then(function(data) {
          book.favored = data.favored;
          return $interval(function() {
            $scope.handle_clear();
            if (data.book_list) {
              return $scope.related_books = data.book_list;
            }
          }, 250, 1);
        });
      },
      handle_borrow: function(event) {
        return NetManager.post('/books/borrow_by_isbn', this.get_book_parm()).then(function(data) {
          var u;
          $scope.btn = {};
          $scope.book.borrow_state = data.status;
          if (data.status === 'ok') {
            $interval(function() {
              $scope.handle_clear();
              return $scope.related_books = data.related_books;
            }, 500, 1);
            $scope.response_msg = "借书成功！";
          }
          if (data.status === 'fail') {
            if (data.errno === 'borrowed') {
              u = data.users[0];
              $scope.response_msg = "该书已被" + u.nickname + "(" + u.account + ")借阅！";
            }
            if (data.errno === 'no_copy') {
              $scope.response_msg = "该书尚未购入";
            }
            return $scope.btn = {
              known: true
            };
          }
        });
      },
      handle_ret: function(event, book_id) {
        if (event.button !== 0) {
          return;
        }
        $scope.ret_book = book_id;
        return $scope.ret_timer = $interval(function() {
          return NetManager.post('/books/ret', {
            book: {
              id: book_id
            }
          }).then(function(data) {
            $scope.ret_book = null;
            return $scope.related_books = data.related_books;
          });
        }, 1000, 1);
      },
      handle_cancel_ret: function() {
        $scope.ret_book = null;
        return $interval.cancel($scope.ret_timer);
      },
      handle_record_request: function() {
        return NetManager.get('/users/access_token', {
          want_to: 'record'
        }).then(function(token) {
          $scope.qrcode = user_login_url(token);
          return console.log($scope.qrcode);
        });
      }
    };
    angular.extend($scope, scattrs);
    ws = new WebSocket('ws://' + window.location.host + '/main/chat');
    ws.onopen = function() {
      return console.log('websocket opened');
    };
    ws.onclose = function() {
      return console.log('websocket closed');
    };
    return ws.onmessage = function(m) {
      return console.log('websocket message: ' + m.data);
    };
  }
]).directive('allInOne', [
  'nodeValidator', function(validator) {
    return {
      require: 'ngModel',
      restrict: 'A',
      link: function(scope, element, attrs, controller) {
        var updateView;
        updateView = function(value) {
          controller.$setViewValue(value);
          controller.$commitViewValue();
          return controller.$render();
        };
        return controller.$validators.allInOne = function(modelValue, viewValue) {
          var isbn_ok, item_id, jd_ok, jd_url, value;
          scope.qrcode = null;
          if (controller.$isEmpty(modelValue)) {
            return true;
          }
          isbn_ok = validator.isISBN(modelValue);
          if (isbn_ok) {
            scope.ok.isbn = true;
            scope.book.isbn = modelValue;
            return true;
          }
          if (jd_url = viewValue.match(/(http(s|):\/\/|)item.jd.com\/(\d+).html/)) {
            item_id = jd_url[3];
            scope.book.jd_id = item_id;
            value = 'JD-' + item_id;
            updateView(value);
          }
          jd_ok = viewValue.match(/JD\-(\d+)/);
          if (jd_ok) {
            scope.ok.jd = true;
            scope.book.jd_id = jd_ok[1];
            return true;
          }
          if (viewValue === "录入" || viewValue === "record") {
            scope.handle_record_request();
            scope.book = {
              isbn: '',
              jd_id: null
            };
            return true;
          }
          return false;
        };
      }
    };
  }
]);
